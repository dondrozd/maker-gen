package renderer_test

import (
	"bytes"
	"fmt"

	"github.com/dondrozd/maker-gen/model"
	"github.com/dondrozd/maker-gen/renderer"

	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
)

var _ = Describe("Maker", func() {
	const (
		structName    = "MyStruct"
		packageName   = "mypackage"
		propertyName1 = "MyPropString"
		propertyType1 = "string"
	)

	Describe("RenderMaker", func() {
		var buf bytes.Buffer
		BeforeEach(func() {
			buf = bytes.Buffer{}
		})
		AfterEach(func() {
			fmt.Println("\nfile:\n", buf.String())
		})
		It("should successfully construct", func() {
			makerDef := model.MakerModel{}

			renderer.RenderMaker(makerDef, &buf)

			Expect(buf.String()).Should(ContainSubstring("// this file was generated by github.com/dondrozd/maker-gen please do not directly modify this file"))
		})
		It("should render package name", func() {
			makerDef := model.MakerModel{
				PackageName: packageName,
			}

			renderer.RenderMaker(makerDef, &buf)

			Expect(buf.String()).Should(ContainSubstring("package mypackage"))
		})
		It("should render a single import", func() {
			makerDef := model.MakerModel{
				Imports: []model.ImportModel{
					{ImportPath: "\"fmt\""},
				},
			}

			renderer.RenderMaker(makerDef, &buf)

			Expect(buf.String()).Should(ContainSubstring("import \"fmt\""))
		})
		It("should render multiple imports", func() {
			makerDef := model.MakerModel{
				Imports: []model.ImportModel{
					{ImportPath: "\"fmt\""},
					{ImportPath: "\"time\""},
				},
			}

			renderer.RenderMaker(makerDef, &buf)

			Expect(buf.String()).Should(SatisfyAll(
				ContainSubstring("import ("),
				ContainSubstring("\"fmt\""),
				ContainSubstring("\"time\""),
				ContainSubstring(")"),
			))
		})
		Describe("struct rendering", func() {
			Context("without prefix", func() {
				BeforeEach(func() {
					makerDef := model.MakerModel{
						PackageName: packageName,
						Structs: []model.MakerStructModel{
							{
								Name:       structName,
								WithPrefix: "",
								Properties: []model.StructPropertyModel{
									{
										Name: propertyName1,
										Type: "string",
									},
								},
							},
						},
					}

					renderer.RenderMaker(makerDef, &buf)
				})
				It("should render struct modifier", func() {
					Expect(buf.String()).Should(SatisfyAll(
						ContainSubstring(fmt.Sprintf("type %sModifier func(*%s.%s)", structName, packageName, structName)),
					))
				})
				It("should render private template", func() {
					Expect(buf.String()).Should(SatisfyAll(
						ContainSubstring(fmt.Sprintf("type template%s struct", structName)),
					))
				})
				It("should render with function", func() {
					Expect(buf.String()).Should(SatisfyAll(
						ContainSubstring(fmt.Sprintf("func With%s(value %s) %sModifier {", propertyName1, propertyType1, structName)),
					))
				})
			})
			Context("with prefix", func() {
				const prefix = "Pre"
				BeforeEach(func() {
					makerDef := model.MakerModel{
						PackageName: packageName,
						Structs: []model.MakerStructModel{
							{
								Name:       structName,
								WithPrefix: prefix,
								Properties: []model.StructPropertyModel{
									{
										Name: propertyName1,
										Type: "string",
									},
								},
							},
						},
					}

					renderer.RenderMaker(makerDef, &buf)
				})
				It("should render with function", func() {
					Expect(buf.String()).Should(SatisfyAll(
						ContainSubstring(fmt.Sprintf("func With%s%s(value %s) %sModifier {", prefix, propertyName1, propertyType1, structName)),
					))
				})
			})
		})
	})
})
