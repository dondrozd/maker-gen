package plan_test

import (
	"bytes"
	"fmt"

	"github.com/dondrozd/maker-gen/model"
	"github.com/dondrozd/maker-gen/renderer"

	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
)

var _ = Describe("Maker", func() {
	Describe("RenderMaker", func() {
		var buf bytes.Buffer
		BeforeEach(func() {
			buf = bytes.Buffer{}
		})
		AfterEach(func() {
			fmt.Println("\nfile:\n", buf.String())
		})
		It("should successfully construct", func() {
			makerDef := model.MakerModel{}

			renderer.RenderMaker(makerDef, &buf)

			Expect(buf.String()).Should(ContainSubstring("// this file was generated by github.com/dondrozd/maker-gen please do not directly modify this file"))
		})
		It("should render package name", func() {
			makerDef := model.MakerModel{
				PackageName: "mypackage",
			}

			renderer.RenderMaker(makerDef, &buf)

			Expect(buf.String()).Should(ContainSubstring("package mypackage"))
		})
		It("should render a single import", func() {
			makerDef := model.MakerModel{
				Imports: []model.ImportModel{
					{ImportPath: "\"fmt\""},
				},
			}

			renderer.RenderMaker(makerDef, &buf)

			Expect(buf.String()).Should(ContainSubstring("import \"fmt\""))
		})
		It("should render multiple imports", func() {
			makerDef := model.MakerModel{
				Imports: []model.ImportModel{
					{ImportPath: "\"fmt\""},
					{ImportPath: "\"time\""},
				},
			}

			renderer.RenderMaker(makerDef, &buf)

			Expect(buf.String()).Should(SatisfyAll(
				ContainSubstring("import ("),
				ContainSubstring("\"fmt\""),
				ContainSubstring("\"time\""),
				ContainSubstring(")"),
			))
		})
	})
})
