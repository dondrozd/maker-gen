package plan_test

import (
	"bytes"
	"dondrozd/maker-gen/model"
	"dondrozd/maker-gen/renderer"
	"fmt"

	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
)

var _ = Describe("Maker", func() {
	Describe("RenderMaker", func() {
		var buf bytes.Buffer
		BeforeEach(func() {
			buf = bytes.Buffer{}
		})
		AfterEach(func() {
			fmt.Println("\nfile:\n", buf.String())
		})
		It("should successfully construct", func() {
			makerDef := model.GoFileModel{}

			renderer.RenderMaker(makerDef, &buf)

			Expect(buf.String()).Should(ContainSubstring("// this file was generated by maker_gen please do not directly modify this file"))
		})
		It("should render package name", func() {
			makerDef := model.GoFileModel{
				PackageName: "mypackage",
			}

			renderer.RenderMaker(makerDef, &buf)

			Expect(buf.String()).Should(ContainSubstring("package mypackage"))
		})
		It("should successfully construct", func() {
			makerDef := model.GoFileModel{
				Imports: []model.ImportModel{
					{ImportPath: "fmt"},
				},
			}

			renderer.RenderMaker(makerDef, &buf)

			Expect(buf.String()).Should(ContainSubstring("import \"fmt\""))
		})
		It("should successfully construct", func() {
			makerDef := model.GoFileModel{
				Imports: []model.ImportModel{
					{ImportPath: "fmt"},
					{ImportPath: "time"},
				},
			}

			renderer.RenderMaker(makerDef, &buf)

			Expect(buf.String()).Should(SatisfyAll(
				ContainSubstring("import ("),
				ContainSubstring("\"fmt\""),
				ContainSubstring("\"time\""),
				ContainSubstring(")"),
			))
		})

	})
})
